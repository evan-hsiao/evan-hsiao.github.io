import{_ as e,o as a,c as t,a as o}from"./app.ee1d1b16.js";const g=JSON.parse('{"title":"Backend page","description":"","frontmatter":{},"headers":[{"level":2,"title":"參考 :","slug":"參考","link":"#參考","children":[]}],"relativePath":"backend_develop/index.md","lastUpdated":1688462137000}'),c={name:"backend_develop/index.md"},d=o('<h1 id="backend-page" tabindex="-1">Backend page <a class="header-anchor" href="#backend-page" aria-hidden="true">#</a></h1><p>後端紀錄Python的FastAPI框架、Node.js的Express.js框架，兩者其實都可以創建前端網頁。</p><p>FastAPI採<code>jinja2</code>套件使用<code>html</code>來撰寫前端頁面腳本，掛上<code>{% block scripts %} {% endblock %}</code>的位置符號即可載入模板資料</p><p>Express.js採<code>.ejs</code>檔，也是掛上<code>&lt;%= title %&gt;</code>位置符號同上使用方法。</p><p>以上兩個做法都是建立前端頁面的使用，當然也可以依據自己習慣的前端撰寫<code>html、css</code>後放在指定的資料夾內，然後在程式內宣告資料夾位置，即可渲染，這是前後端分別寫作的方法。</p><p>唉~</p><p>本來以為不會接觸 <code>Django</code>，最後還是來了!初步接觸會時常與<code>Fastapi</code>比較，常常會覺得靈活度被限制舉多，正當慢慢熟悉後，才會曉得這些應該稱作規範，是為了要讓安全性、穩定性提升所制定。</p><p>發現<code>Django</code>網路上的範例、教學確實比<code>Fastapi</code>多出數倍，對於學習上蠻有幫助。</p><p>心得是建議先從 <code>FastAPI</code> 入手，了解框架的運作模式後再往架構複雜一點的 <code>Django</code> 學習，前者可以用在架構較小的專案使用，如果需要龐大及安全性較佳的專案，建案還是選擇後者。</p><h2 id="參考" tabindex="-1">參考 : <a class="header-anchor" href="#參考" aria-hidden="true">#</a></h2><ul><li><a href="https://mrmad.com.tw/chatgpt-line-robot-creation-teaching" target="_blank" rel="noreferrer">ChatGPT LINE機器人創建教學，教你打造個人專屬LINE AI 助理隨時都能聊</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10310610" target="_blank" rel="noreferrer">創建屬於自己的 ChatGPT LINE BOT</a></li></ul>',11),r=[d];function n(s,p,i,l,h,_){return a(),t("div",null,r)}const f=e(c,[["render",n]]);export{g as __pageData,f as default};
