import{_ as e,o as t,c as i,a}from"./app.45fb3b71.js";const h=JSON.parse('{"title":"Vite | Vue","description":"","frontmatter":{},"headers":[],"relativePath":"frontend_develop/vite/index.md","lastUpdated":1683292222000}'),r={name:"frontend_develop/vite/index.md"},s=a('<h1 id="vite-vue" tabindex="-1">Vite | Vue <a class="header-anchor" href="#vite-vue" aria-hidden="true">#</a></h1><p><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite 官網</a> | <a href="https://vuejs.org/" target="_blank" rel="noreferrer">Vue 官網</a></p><p>和過去操作過的Vue-CLI相比，的確在瀏覽器渲染的速度下差異非常大，不單單只專屬給Vue使用，React也可以拿來開發。</p><p>至於為什會速度會變那麼快，請ChatGPT幫我回答:</p><p>Vite是一個現代化的前端開發工具，它之所以能夠達到極快的速度，主要有以下幾點原因：</p><ol><li><p>基於ES modules的開發：Vite使用ES modules作為開發模式，這種模式允許只導入需要的代碼，而不是像傳統的打包工具一樣將整個應用程序打包到一個文件中。這樣可以大大減少應用程序的啟動時間和代碼的加載時間。</p></li><li><p>非阻塞式的編譯：Vite使用Rollup和esbuild進行編譯，這兩個工具都是非阻塞式的。這意味著當Vite編譯應用程序時，即使在編譯過程中出現錯誤，應用程序仍然可以繼續運行，而不會被阻塞。</p></li><li><p>快速的熱模塊替換（HMR）：Vite內置了熱模塊替換（HMR）功能，它可以在應用程序運行期間更新代碼，而不需要重新加載整個應用程序。這樣可以大大減少開發和測試代碼時的反應時間。</p></li><li><p>非常輕量級的代碼：Vite本身的代碼非常輕量級，這使得它可以快速啟動和運行。Vite本身的代碼只有幾百行，而且不依賴於任何大型的庫或框架。</p></li></ol><p>綜上所述，Vite之所以能夠達到極快的速度，主要是因為它使用ES modules進行開發、使用非阻塞式的編譯工具、內置了快速的熱模塊替換功能，並且本身的代碼非常輕量級。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>官網也是採用VitePress撰寫，如果有印象可以繼續參考上篇 <a href="/frontend_develop/vitepress/">VitePress區</a> 的文檔。</p></div>',8),o=[s];function p(l,d,n,_,c,u){return t(),i("div",null,o)}const v=e(r,[["render",p]]);export{h as __pageData,v as default};
